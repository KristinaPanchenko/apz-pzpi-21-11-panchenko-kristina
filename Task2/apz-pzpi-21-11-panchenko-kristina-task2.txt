1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Концептуальне моделювання предметної області передбачає визначення основних сутностей системи управління сонячними панелями та їх взаємозв'язків. Це необхідно для створення чіткої структури системи та полегшення подальшої розробки її компонентів.
Основні сутності системи управління сонячними панелями включають: сонячна панель, клієнт, батарея, інформація про погоду тощо.

2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ
Діаграма розгортання (див. рис. 1.4) відображає структуру основних компонентів серверної частини та їх взаємодію.

Рисунок 1.4 – Діаграма розгортання

3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ

Серверна частина системи управління сонячними панелями була реалізована з використанням сучасних технологій для забезпечення надійності, масштабованості та ефективності. Нижче наведено опис використаних технологій та компонентів.
Використані технології
–	мова програмування: C# - основна мова програмування для серверної частини. C# є мовою, що дозволяє швидко розробляти надійні та масштабовані серверні додатки;
–	.NET 5 - основний фреймворк для розробки серверного застосунку. .NET 5 забезпечує високу продуктивність і єдність кодової бази для різних типів додатків;
–	entity Framework Core - ORM (Object-Relational Mapping) фреймворк для роботи з базою даних. Entity Framework Core дозволяє легко працювати з реляційними базами даних, забезпечуючи високий рівень абстракції та автоматичне створення SQL-запитів;
–	ASP.NET Core Web API - фреймворк для створення RESTful веб-сервісів. ASP.NET Core Web API забезпечує легкість у створенні, тестуванні та розгортанні веб-сервісів, що відповідають стандартам REST.
Основні компоненти серверної частини:
–	контролери (Controllers) - відповідають за обробку HTTP-запитів і повернення відповідей клієнтам. Контролери містять основну логіку для CRUD-операцій над сутностями;
–	моделі (Models) - містять визначення сутностей та їх властивостей, які відповідають таблицям бази даних;
–	контекст бази даних (DbContext) - контекст бази даних, який визначає набір таблиць та конфігурацію для роботи з базою даних через Entity Framework Core.
Діаграма пакетів (див. рис. 1.3) відображає структуру основних компонентів серверної частини та їх взаємодію.
Діаграма розгортання (див. рис. 1.4) відображає структуру основних компонентів серверної частини та їх взаємодію.
Клас AppContext (див. додаток А.1), який успадковує від класу DbContext з Entity Framework Core. Цей клас представляє контекст бази даних для додатку.
Конструктор AppContext викликає методи Database.EnsureCreated() або Database.EnsureDeleted() для забезпечення наявності або відсутності бази даних, якщо вона не існує або потрібно видалити.
Властивості DbSet визначають таблиці бази даних, які будуть представлені в цьому контексті. Є такі сутності: Battery, Customer, House, SolarPanel, SolarPanelType, WeatherData.
Метод OnConfiguring встановлює параметри підключення до бази даних. У моєму випадку використовується SQL Server, і вказується підключення до локального екземпляра (localdb)\\mssqllocaldb. Також вказується ім'я бази даних Solar та використовується аутентифікацію на основі Windows з Trusted_Connection=True.
Метод OnModelCreating може бути використаний для налаштування моделей даних та відносин між ними за допомогою API конфігурації моделі Entity Framework Core. У цьому прикладі він залишений порожнім, але можна додати конфігурації, якіпотрібні, для визначення взаємозв'язків, обмежень тощо.

4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

UseCase діаграма (див. рис. 1.1) відображає основні функціональні можливості системи та взаємодію користувачів (акторів) з нею. У моєму випадку основним актором є Адміністратор, який має доступ до управління сонячними панелями, клієнтами та батареями тощо.

Рисунок 1.1 – Use case діаграма
Кожен з цих основних кейсів використання (Use Cases) деталізується в окремих діях:
–	додавання - дозволяє додавати нові сутності до системи;
–	оновлення - дозволяє оновлювати існуючі сутності;
–	видалення - дозволяє видаляти сутності з системи;
–	перегляд - дозволяє переглядати інформацію про сутності.
Ця діаграма допомагає візуалізувати функціональність системи та зрозуміти, які операції можуть виконувати користувачі.

5 ПОБУДОВА ER-ДІАГРАМИ

У даному розділі описується структура бази даних для системи управління сонячними панелями. База даних складається з кількох таблиць, кожна з яких представляє конкретну сутність системи. Зв'язки між таблицями відображають взаємозв'язки між сутностями. Ця модель дозволяє ефективно зберігати та управляти інформацією про сонячні панелі, їх типи, акумулятори, будинки, клієнтів та дані про погодні умови.
ER-діаграму показано на рисунку 1.2.
 
Рисунок 1.2 – ER-діаграма

Сутності та їх атрибути.
Акумулятор (Battery):
–	id: унікальний ідентифікатор акумулятора;
–	ємкість: ємкість акумулятора;
–	тип: тип акумулятора;
–	дата_встановлення: дата встановлення акумулятора.
Сонячна панель (SolarPanel):
–	id: унікальний ідентифікатор сонячної панелі;
–	назва: назва сонячної панелі;
–	колір: колір сонячної панелі;
–	дата_встановлення: дата встановлення сонячної панелі.
Будинок (House):
–	id: унікальний ідентифікатор будинку;
–	адреса: адреса будинку;
–	місто: місто, де розташований будинок;
–	область: область, де розташований будинок;
–	поштовий_індекс: поштовий індекс будинку;
–	країна: країна, де розташований будинок;
–	дата_реєстрації: дата реєстрації будинку.
Клієнт (Customer):
–	id: унікальний ідентифікатор клієнта;
–	ім'я: ім'я клієнта;
–	прізвище: прізвище клієнта;
–	телефон: телефон клієнта;
–	дата_реєстрації: дата реєстрації клієнта.
Тип сонячної панелі (SolarPanelType):
–	іd: унікальний ідентифікатор типу сонячної панелі;
–	gотужність: потужність сонячної панелі;
–	виробник: виробник сонячної панелі;
–	клас_ефективності: клас ефективності сонячної панелі;
–	технологія: технологія виготовлення сонячної панелі;
–	тип_клітини: тип клітини сонячної панелі;
–	конфігурація_клітини: конфігурація клітини сонячної панелі;
–	гарантія: гарантійний термін сонячної панелі.
Дані про погоду (WeatherData):
–	іd: унікальний ідентифікатор запису про погодні умови;
–	дата: дата запису;
–	температура: температура повітря на момент запису;
–	опади: кількість опадів на момент запису;
–	вологість: рівень вологості на момент запису.
Зв'язки між сутностями:
–	аккумулятор та Будинок - зв'язок один до багатьох, тобто один будинок може мати кілька акумуляторів;
–	сонячна панель та Будинок - зв'язок один до багатьох, тобто один будинок може мати кілька сонячних панелей;
–	сонячна панель та тип сонячної панелі - зв'язок багато до одного, тобто багато сонячних панелей можуть мати один і той же тип;
–	будинок та Клієнт - зв'язок багато до одного, тобто один клієнт може володіти кількома будинками;
–	дані про погоду та Будинок - зв'язок один до одного, тобто кожен запис про погодні умови прив'язаний до одного будинку.
Ця модель бази даних забезпечує зберігання всіх необхідних даних для управління сонячними панелями, їх встановленням та експлуатацією, а також для моніторингу погодних умов, які можуть впливати на їх ефективність.

6 СПЕЦИФІКАЦІЯ REST

У цьому розділі надається REST специфікація для основних сутностей системи управління сонячними панелями. Для кожної сутності вказано перелік доступних HTTP-методів та відповідні URL-адреси для виконання CRUD-операцій.
Акумулятори (Batteries):
–	GET /api/Batteries - Отримати список акумуляторів;
–	POST /api/Batteries - Створити новий акумулятор;
–	GET /api/Batteries/{id} - Отримати конкретний акумулятор за його ідентифікатором;
–	PUT /api/Batteries/{id} - Оновити інформацію про акумулятор за його ідентифікатором;
–	DELETE /api/Batteries/{id} - Видалити акумулятор за його ідентифікатором.
Клієнти (Customers):
–	GET /api/Customers - Отримати список клієнтів;
–	POST /api/Customers - Створити нового клієнта;
–	GET /api/Customers/{id} - Отримати конкретного клієнта за його ідентифікатором;
–	PUT /api/Customers/{id} - Оновити інформацію про клієнта за його ідентифікатором;
–	DELETE /api/Customers/{id} - Видалити клієнта за його ідентифікатором.
Будинки (Houses):
–	GET /api/Houses - Отримати список будинків;
–	POST /api/Houses - Створити новий будинок;
–	GET /api/Houses/{id} - Отримати конкретний будинок за його ідентифікатором;
–	PUT /api/Houses/{id} - Оновити інформацію про будинок за його ідентифікатором;
–	DELETE /api/Houses/{id} - Видалити будинок за його ідентифікатором.
Сонячні панелі (SolarPanels):
–	GET /api/SolarPanels - Отримати список сонячних панелей;
–	POST /api/SolarPanels - Створити нову сонячну панель;
–	GET /api/SolarPanels/{id} - Отримати конкретну сонячну панель за її ідентифікатором;
–	PUT /api/SolarPanels/{id} - Оновити інформацію про сонячну панель за її ідентифікатором;
–	DELETE /api/SolarPanels/{id} - Видалити сонячну панель за її ідентифікатором.
Типи сонячних панелей (SolarPanelTypes):
–	GET /api/SolarPanelTypes - Отримати список типів сонячних панелей;
–	POST /api/SolarPanelTypes - Створити новий тип сонячної панелі;
–	GET /api/SolarPanelTypes/{id} - Отримати конкретний тип сонячної панелі за його ідентифікатором;
–	PUT /api/SolarPanelTypes/{id} - Оновити інформацію про тип сонячної панелі за його ідентифікатором;
–	DELETE /api/SolarPanelTypes/{id} - Видалити тип сонячної панелі за його ідентифікатором.
Дані про погоду (WeatherDatas):
–	GET /api/WeatherDatas - Отримати список даних про погоду;
–	POST /api/WeatherDatas - Створити новий запис про погоду;
–	GET /api/WeatherDatas/{id} - Отримати конкретний запис про погоду за його ідентифікатором;
–	PUT /api/WeatherDatas/{id} - Оновити інформацію про запис про погоду за його ідентифікатором;
–	DELETE /api/WeatherDatas/{id} - Видалити запис про погоду за його ідентифікатором.

ВИСНОВКИ

В результаті виконання цієї лабораторної роботи я отримала практичні навички з розробки серверної частини системи управління сонячними панелями з використанням технологій C#, .NET 5, Entity Framework та ASP.NET Web API. Навчилася створювати моделі даних, налаштовувати контекст бази даних, розробляти RESTful API для забезпечення ефективної взаємодії між сервером та клієнтом, а також документувати та тестувати свої API ендпоїнти. Ці навички є важливими для сучасних розробників і можуть бути застосовані у різноманітних проектах, що потребують створення надійних та масштабованих серверних рішень.
