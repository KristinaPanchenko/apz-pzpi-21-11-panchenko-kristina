1 ВИМОГИ ДО СИСТЕМИ

Наведемо діаграми розроблені в минулих лабораторних роботах для розуміння загальної структури системи(див. рис. 3.1, 3.2, 3.3, 3.4)
Рисунок 3.1 – Use case діаграма
Рисунок 3.2 – ER-діаграма
Рисунок 3.3 – Діаграма пакетів
Рисунок 3.4 – Діаграма розгортання
Проаналізувавши діаграми, звернемо увагу на IoT частину системи управління сонячними панелями. Основним завданням IoT частини є збір, обробка та передача даних про погодні умови, які безпосередньо впливають на ефективність роботи сонячних панелей. Дані про погодні умови будуть записуватися в таблицю Дані_про_погоду у базі даних.
Для емуляції IoT пристрою, який буде збирати ці дані, використовується платформа WPF (Windows Presentation Foundation). Вибір WPF обумовлений її можливістю створювати інтуїтивно зрозумілі та інтерактивні інтерфейси, що дозволяє ефективно моделювати роботу реального IoT пристрою. Використання WPF також дозволяє розробникам швидко змінювати та тестувати різні сценарії збору даних, що є критично важливим для забезпечення високої точності та надійності системи.
Збір даних. IoT пристрій буде емулювати збір таких погодних параметрів, як температура, вологість та опади. Ці параметри є ключовими для аналізу ефективності роботи сонячних панелей, оскільки вони безпосередньо впливають на кількість виробленої енергії.
Обробка даних. Після збору дані будуть оброблятися у режимі реального часу. Це дозволить швидко реагувати на зміни погодних умов та здійснювати відповідні коригування у роботі сонячних панелей для забезпечення їх максимальної продуктивності.
Передача даних. Оброблені дані будуть передаватися до серверної частини системи через REST API. Серверна частина, реалізована на платформі ASP.NET з використанням C# та Entity Framework, забезпечить надійне зберігання даних у базі даних SQL Server.
Запис даних у базу. Дані про погодні умови будуть записуватися в таблицю Дані_погоди. Ця таблиця міститиме інформацію про дату та час збору даних, температуру, вологість та кількість опадів. Така структура даних дозволить легко здійснювати аналіз та генерувати звіти про вплив погодних умов на ефективність роботи сонячних панелей.
Аналіз та оптимізація. Отримані дані будуть використовуватися для аналізу ефективності роботи системи та її оптимізації. Модуль аналітики у серверній частині системи дозволить виявляти тенденції, прогнозувати продуктивність сонячних панелей та надавати рекомендації щодо їх налаштування для досягнення максимальної ефективності.
Тестування та налагодження. Емуляція IoT пристрою на базі WPF дозволить провести детальне тестування системи у різних умовах, виявити можливі проблеми та забезпечити їх оперативне вирішення. Це також надасть можливість вдосконалювати алгоритми обробки даних та підвищувати точність прогнозування.
Таким чином, IoT частина системи управління сонячними панелями, реалізована за допомогою WPF для емуляції збору даних про погодні умови, є критично важливим компонентом, що забезпечує точність, надійність та ефективність всієї системи.

2 ОСОБЛИВОСТІ РЕАЛІЗАЦІЇ

Реалізація IoT частини системи управління сонячними панелями включає використання емуляції збору даних про погодні умови за допомогою WPF. Основні особливості реалізації полягають у створенні інтерфейсу для введення даних, їх обробки та передачі на серверну частину системи для зберігання та аналізу.
Інтерфейс користувача. Інтерфейс WPF забезпечує зручний спосіб введення даних про погодні умови. Користувач може ввести значення температури, вологості, опадів, а також дату та час збору даних. Для емуляції збору даних використовуються текстові поля для введення відповідних значень та кнопка для підтвердження введених даних.
Обробка даних. Після натискання кнопки підтвердження дані з полів вводу збираються та перевіряються на правильність формату. У разі помилки форматування виводиться повідомлення про некоректні дані. Для обробки введених даних використовується метод SubmitButton_Click, код якого наведено в додатку А.
Передача даних на сервер. Після успішного збирання та перевірки даних вони передаються на серверну частину системи через HTTP-запит. Для цього використовується клас HttpClient, який забезпечує створення та відправку POST-запиту до API сервера. Дані серіалізуються у формат JSON і включаються у вміст запиту.
Обробка помилок. У випадку виникнення помилок під час відправки запиту або обробки відповіді сервера, вони обробляються у блоці try-catch. Це дозволяє уникнути збоїв у роботі програми та забезпечити стабільну роботу системи.
Зберігання даних. Дані про погодні умови, отримані від IoT пристрою, зберігаються у таблиці Дані_про_погоду у базі даних SQL Server. Це дозволяє здійснювати подальший аналіз та використання даних для оптимізації роботи сонячних панелей.
Таким чином, реалізація IoT частини системи забезпечує ефективний збір, обробку та передачу даних про погодні умови, що є критично важливим для оптимізації роботи сонячних панелей та підвищення їх продуктивності

ВИСНОВКИ
Розробка та впровадження IoT частини системи управління сонячними панелями дозволяє суттєво підвищити ефективність використання сонячної енергії шляхом оптимізації роботи панелей на основі реальних даних про погодні умови. Використання платформи WPF для емуляції збору даних про погодні умови забезпечило створення зручного та інтуїтивно зрозумілого інтерфейсу для користувачів, що сприяє точному збору даних та їх подальшій обробці.
Основні досягнення цієї роботи включають:
Ефективний збір даних. Реалізовано механізм збору даних про температуру, вологість, опади та інші погодні умови, що дозволяє отримувати точні та актуальні дані для аналізу.
Обробка та перевірка даних. Забезпечено обробку введених даних з перевіркою на правильність формату, що мінімізує ризики некоректного вводу та підвищує надійність системи.
Передача даних на сервер. Реалізовано передачу зібраних даних на серверну частину системи через HTTP-запити з використанням REST API. Це забезпечує збереження даних у базі даних для подальшого аналізу та використання.
Зберігання даних. Дані про погодні умови надійно зберігаються у таблиці Дані_про_погоду у базі даних SQL Server, що дозволяє здійснювати детальний аналіз та використовувати ці дані для оптимізації роботи сонячних панелей.
Інтерактивний інтерфейс. Використання WPF для створення емуляції IoT пристрою забезпечило зручний інтерфейс користувача, що сприяє легкому введенню та обробці даних, а також оперативному тестуванню різних сценаріїв.
В цілому, реалізація IoT частини системи управління сонячними панелями показала високу ефективність та надійність запропонованого підходу. Зібрані дані про погодні умови дозволяють більш точно прогнозувати продуктивність сонячних панелей та здійснювати їх оптимальне налаштування, що сприяє підвищенню загальної ефективності системи. Подальший розвиток цієї системи може включати розширення функціоналу, інтеграцію з іншими джерелами даних та вдосконалення алгоритмів аналізу для ще більшої оптимізації роботи сонячних панелей. 

ДОДАТОК А
private void submitbutton_click(object sender, routedeventargs e)
{
    weatherdata weatherdata = null;
    try
    {
        weatherdata = new weatherdata()
        {
            precipitation = int.parse(precipitationinput.text),
            datetime = datetime.parse(datetimeinput.text),
            humidity = int.parse(humidityinput.text),
            temperature = int.parse(temperatureinput.text),
            houseid = int.parse(houseidinput.text),
        };
    }
    catch
    {
        messagebox.show("inputs value format error");
    }
    using (var client = new httpclient())
    {
        string url = "https://localhost:5001/api/weatherdatas";
        var json = jsonserializer.serialize(weatherdata);

        var content = new stringcontent(json, encoding.utf8, "application/json");
        var request = new httprequestmessage(new httpmethod("post"), url)
        {
            content = content
        };
        try
        {
            var response = client.sendasync(request).result;
        }
        catch (exception ex)
        {
        }
    }
}
public class weatherdata
{
    public datetime datetime { get; set; }
    public int temperature { get; set; }
    public int humidity { get; set; }
    public int precipitation { get; set; }
    public int houseid { get; set; }
}
