1 АРХІТЕКТУРА СИСТЕМИ

Архітектура клієнтської частини адміністративної системи управління сонячними панелями складається з наступних ключових компонентів та технологій.
Структура додатка:
–	react.Js: Використовується як основний фреймворк для побудови інтерфейсу користувача. React.Js дозволяє створювати компонентну архітектуру, що забезпечує модульність, повторне використання коду та легкість в управлінні станом додатка;
–	typeScript: Доповнює JavaScript статичною типізацією;
–	javaScript: Використовується для загальної логіки додатка та маніпуляції DOM.
Основні компоненти:
–	компоненти UI: Створюють і відображають інтерфейс користувача. Основні компоненти включають форми для введення даних, таблиці для відображення інформації та модальні вікна для підтвердження дій;
–	стан додатка: Керується за допомогою React's state і context API, що дозволяє ефективно управляти станом додатка на різних рівнях компонентів;
–	форми та валідація: Для обробки введення даних і забезпечення їхньої коректності використовуються бібліотеки, такі як Formik і Yup.
Зв'язок з сервером:
–	HTTP-запити: Використання бібліотеки Axios для здійснення CRUD операцій через API. Це дозволяє відправляти запити до серверної частини для створення, читання, оновлення та видалення даних;
–	обробка асинхронних операцій: Використання async/await для обробки асинхронних запитів, що робить код більш зрозумілим і підтримуваним.
Маршрутизація: React Router - забезпечує маршрутизацію всередині додатка, дозволяючи користувачам перемикатися між різними сторінками інтерфейсу (наприклад, сторінки управління сонячними панелями, акумуляторами, будинками та клієнтами).
Система управління станом: Context API - для глобального управління станом додатка, забезпечуючи централізоване зберігання та доступ до стану різних компонентів. Це важливо для синхронізації даних між різними частинами додатка.
Архітектура клієнтської частини забезпечує гнучкість, масштабованість та легкість у підтримці додатка, дозволяючи адміністраторам ефективно управляти сонячними панелями, акумуляторами, будинками та клієнтами. Завдяки використанню сучасних технологій та підходів, система є надійною та зручною у використанні.
На рисунку 4.1 показано UseCase діаграму. 
Рисунок 4.1 – UseCase діаграма
На даній діаграмі представлені основні дії, які можуть виконувати різні користувачі системи управління сонячними панелями.
Адміністратор:
–	управління сонячними панелями (створення, перегляд, редагування, видалення);
–	управління типами сонячних панелей (створення, перегляд, редагування, видалення);
–	управління будинками (створення, перегляд, редагування, видалення);
–	управління акумуляторами (створення, перегляд, редагування, видалення);
–	управління клієнтами (створення, перегляд, редагування, видалення);
–	управління пристроями погодних умов (створення, перегляд, редагування, видалення).
Клієнт:
–	перегляд своїх будинків;
–	перегляд своїх акумуляторів;
–	перегляд своїх сонячних панелей.
Система - управління пристроями погодних умов (створення, перегляд, редагування, видалення)
Ця діаграма демонструє взаємодію користувачів з системою та дозволяє зрозуміти, які функціональні можливості надає клієнтська частина адміністративної системи управління сонячними панелями.
Діаграму пакетів показано на рисунку 4.2.
Рисунок 4.2 – Діаграма пакетів
ER-діаграму показано на рисунку 4.3.
Рисунок 4.3 – ER-діаграма
Діаграма діяльності (див. рис. 4.4) ілюструє процес взаємодії клієнта та адміністратора системи управління сонячними панелями при придбанні клієнтом сонячних панелей. На діаграмі показано послідовність дій, починаючи з бажання клієнта придбати панель і закінчуючи установкою панелі та відправленням даних з датчиків. Цей процес включає кілька етапів перевірки та реєстрації, що забезпечують коректність виконання всіх необхідних операцій.
Рисунок 4.4 – Діаграма діяльності
Діаграма компонентів (див. рис. 4.5) ілюструє структуру клієнтської частини адміністративної системи управління сонячними панелями. Вона демонструє взаємозв'язки між різними компонентами, що використовуються в системі.
Рисунок 4.5 – Діаграма компонентів
Опис діаграми компонентів
–	Client-side (React, TypeScript, JavaScript) - це основний компонент, в якому реалізовано логіку клієнтської частини системи, включаючи створення, читання, оновлення та видалення даних;
–	User Interface (UI Components) - компоненти інтерфейсу користувача створюють візуальні елементи, які взаємодіють з користувачами. Вони включають форми, таблиці, кнопки та інші елементи;
–	State Management (Context API) - використовується для глобального управління станом додатка. Це дозволяє синхронізувати дані між різними компонентами додатка та централізовано керувати станом;
–	Routing (React Router) - використовується для управління навігацією між різними сторінками додатка. Це дозволяє користувачам легко перемикатися між різними функціональними частинами додатка;
–	HTTP Requests (Axios) - бібліотека для обробки HTTP-запитів. Використовується для взаємодії з серверною частиною системи, здійснення CRUD операцій через API;

2 ОПИС ІНТЕРФЕЙСУ

Інтерфейс клієнтської частини адміністративної системи управління сонячними панелями розроблено з урахуванням зручності користувачів та функціональної повноти. Кожна сторінка інтерфейсу забезпечує можливість виконання CRUD операцій (створення, читання, оновлення, видалення) для різних компонентів системи. Нижче наведено детальний опис кожної з цих сторінок.
Сторінка управління акумуляторами. На цій сторінці адміністратор має можливість:
–	переглядати список акумуляторів: відображається таблиця з інформацією про всі зареєстровані акумулятори, включаючи їх технічні характеристики та стан;
–	cтворювати новий акумулятор: при натисканні на кнопку "Додати нове" відкривається модальне вікно, де можна ввести всі необхідні дані про новий акумулятор;
–	редагувати акумулятор: натиснувши на кнопку "Редагувати" поруч з конкретним акумулятором у таблиці, відкривається модальне вікно з можливістю змінити дані;
–	видаляти акумулятор: натиснувши на кнопку "Видалити", адміністратор може видалити акумулятор з системи після підтвердження дії.
Сторінка управління клієнтами. Ця сторінка дозволяє адміністратору:
–	переглядати список клієнтів: у таблиці відображається інформація про всіх зареєстрованих клієнтів, включаючи їх контактні дані та статус;
–	додавати нового клієнта: натиснувши на кнопку "Додати нове", адміністратор може відкрити модальне вікно для введення даних про нового клієнта;
–	редагувати дані клієнта: можливість змінити дані клієнта через модальне вікно, яке відкривається при натисканні на кнопку "Редагувати";
–	видаляти клієнта: адміністратор може видалити клієнта зі системи, підтвердивши дію після натискання на кнопку "Видалити".
Сторінка управління будинками. На цій сторінці адміністратор може:
–	переглядати список будинків: у таблиці представлена інформація про всі будинки, зареєстровані у системі, включаючи адреси та належність до клієнтів;
–	створювати новий будинок: модальне вікно для введення даних про новий будинок відкривається при натисканні на кнопку "Додати нове";
–	редагувати будинок: можливість змінити дані про будинок через модальне вікно, яке відкривається при натисканні на кнопку "Редагувати";
–	видаляти будинок: адміністратор може видалити будинок з системи, підтвердивши дію після натискання на кнопку "Видалити".
Сторінка управління сонячними панелями. Ця сторінка надає можливість:
–	переглядати список сонячних панелей: у таблиці відображається інформація про всі сонячні панелі, включаючи їх технічні характеристики та стан;
–	додавати нову сонячну панель: при натисканні на кнопку "Додати нове" відкривається модальне вікно для введення даних про нову панель;
–	редагувати сонячну панель: можливість змінити дані про панель через модальне вікно, яке відкривається при натисканні на кнопку "Редагувати";
–	видаляти сонячну панель: адміністратор може видалити панель зі системи, підтвердивши дію після натискання на кнопку "Видалити".
Сторінка управління типами сонячних панелей. На цій сторінці адміністратор може:
–	переглядати список типів сонячних панелей: у таблиці відображається інформація про всі типи сонячних панелей, включаючи їх характеристики та виробників;
–	створювати новий тип сонячної панелі: модальне вікно для введення даних про новий тип панелі відкривається при натисканні на кнопку "Додати тип";
–	редагувати тип сонячної панелі: можливість змінити дані про тип панелі через модальне вікно, яке відкривається при натисканні на кнопку "Редагувати";
–	видаляти тип сонячної панелі: адміністратор може видалити тип панелі зі системи, підтвердивши дію після натискання на кнопку "Видалити".
Сторінка інформації про погодні умови. Ця сторінка дозволяє:
–	переглядати дані про погодні умови: у таблиці відображаються поточні дані з датчиків, включаючи температуру, вологість та інші метеорологічні параметри;
–	додавати нові дані про погодні умови: при натисканні на кнопку "Додати нове" відкривається модальне вікно для введення даних;
–	редагувати дані: можливість змінити дані про погодну умову через модальне вікно, яке відкривається при натисканні на кнопку "Редагувати";
–	видаляти інформацію про погоду умову: адміністратор може видалити інформацію з системи, підтвердивши дію після натискання на кнопку "Видалити".
Цей інтерфейс забезпечує повний контроль та управління різними аспектами системи управління сонячними панелями, надаючи адміністраторам зручні та ефективні інструменти для виконання їхніх завдань.

3 ВИКОРИСТАНІ ТЕХНОЛОГІЇ

Для розробки клієнтської частини адміністративної системи управління сонячними панелями були використані сучасні веб-технології та фреймворки. Нижче наведено опис основних технологій, які були використані у проекті.
React [1] – бібліотека JavaScript [3], що використовується для створення користувацьких інтерфейсів. Основні переваги:
–	компонентна архітектура: дозволяє розбивати додаток на невеликі, ізольовані частини (компоненти), що спрощує розробку та тестування;
–	virtual DOM: забезпечує ефективне оновлення інтерфейсу користувача, мінімізуючи маніпуляції з реальним DOM;
–	JSX: синтаксис, що дозволяє писати HTML-код безпосередньо в JavaScript, роблячи код більш читабельним та зрозумілим.
TypeScript [2] – це надмножина JavaScript [3], що додає статичну типізацію до мови. Використання TypeScript [2] у проекті дозволяє:
–	підвищити якість коду: завдяки типізації зменшується кількість помилок, які важко відслідкувати в JavaScript [3];
–	краща інтеграція з редакторами коду: покращена підтримка автодоповнення та рефакторингу коду;
–	зрозумілий і передбачуваний код: чіткі типи даних допомагають розробникам краще розуміти структуру додатку та взаємодію компонентів.
JavaScript [3] – мова програмування, що використовується для додавання інтерактивності на веб-сторінках. Основні можливості JavaScript [3], використані у проекті:
–	маніпуляція DOM: дозволяє динамічно змінювати вміст веб-сторінки;
–	обробка подій: забезпечує взаємодію користувачів з інтерфейсом через обробники подій (наприклад, кліки, наведення миші тощо);
–	асинхронне програмування: забезпечує роботу з асинхронними операціями, такими як HTTP-запити.
React Router [4] – це бібліотека для управління маршрутизацією у React-додатках. Вона забезпечує:
–	декларативну маршрутизацію: дозволяє легко визначати маршрути та їх компоненти;
–	динамічне завантаження компонентів: завантаження компонентів тільки тоді, коли вони необхідні, що покращує продуктивність додатка;
–	підтримку навігації історії: інтеграція з історією браузера для підтримки навігації назад/вперед.
Axios [5] – це бібліотека для виконання HTTP-запитів у браузері. Вона використовується для взаємодії клієнтської частини з сервером. Основні переваги Axios [5]:
–	простота використання: зручний синтаксис для виконання HTTP-запитів (GET, POST, PUT, DELETE);
–	підтримка промісів: дозволяє працювати з асинхронними операціями з використанням промісів, що покращує читабельність коду;
–	інтерцептори: можливість перехоплювати запити та відповіді для додаткової обробки (наприклад, додавання токенів автентифікації).
Код (див. додаток А.1) представляє собою реалізацію API-запитів для управління сонячними панелями в адміністративній системі. В даному випадку використовується модуль $authhost для виконання HTTP-запитів. Детальний опис кожної функції:
–	$authhost – це об'єкт для виконання HTTP-запитів, який, налаштований для роботи з аутентифікацією;
–	IPanelChangeData та IPanelCreateData – інтерфейси, які описують структуру даних для зміни та створення сонячних панелей відповідно;
–	функція getPanels - функція відправляє GET-запит на кінцеву точку api/SolarPanels і отримує список усіх сонячних панелей. Повернуті дані (data) містять інформацію про сонячні панелі;
–	функція crearePanel - функція відправляє POST-запит на кінцеву точку api/SolarPanels для створення нової сонячної панелі. Дані для створення панелі передаються в тілі запиту (formData). Повернуті дані (data) містять інформацію про створену сонячну панель;
–	функція editPanel - функція відправляє PUT-запит на кінцеву точку api/SolarPanels/${id} для оновлення існуючої сонячної панелі. Ідентифікатор панелі передається як частина URL (id), а дані для оновлення передаються в тілі запиту (formData). Повернуті дані (data) містять оновлену інформацію про сонячну панель;
–	функція deletePanel - функція відправляє DELETE-запит на кінцеву точку api/SolarPanels/${id} для видалення сонячної панелі. Ідентифікатор панелі передається як частина URL (id). Повернуті дані (data) підтверджують успішне видалення сонячної панелі.
Ці технології забезпечують ефективний розвиток, підтримку та тестування клієнтської частини адміністративної системи управління сонячними панелями, дозволяючи створювати надійний, масштабований та зручний у використанні продукт.
 
ВИСНОВКИ

У ході виконання даної лабораторної роботи було розроблено систему управління сонячними панелями, яка дозволяє здійснювати CRUD операції над різними об'єктами, такими як сонячні панелі, акумулятори, будинки та клієнти. Клієнтська частина системи була успішно реалізована за допомогою технологій TypeScript, JavaScript та React.Js. Створена система забезпечує зручний та інтуїтивно зрозумілий інтерфейс для адміністратора, що дозволяє ефективно управляти об'єктами системи. Проведене тестування підтвердило коректність роботи усіх функцій системи. Виконання цієї роботи дозволило поглибити знання у галузі веб-розробки та управління відновлюваними джерелами енергії, а також набути практичних навичок у розробці адміністративних систем.
